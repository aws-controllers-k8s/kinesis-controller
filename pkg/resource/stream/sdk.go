// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package stream

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/kinesis"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/kinesis/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/kinesis-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Stream{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeStreamSummaryOutput
	resp, err = rm.sdkapi.DescribeStreamSummary(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeStreamSummary", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.StreamDescriptionSummary.ConsumerCount != nil {
		consumerCountCopy := int64(*resp.StreamDescriptionSummary.ConsumerCount)
		ko.Status.ConsumerCount = &consumerCountCopy
	} else {
		ko.Status.ConsumerCount = nil
	}
	if resp.StreamDescriptionSummary.EncryptionType != "" {
		ko.Status.EncryptionType = aws.String(string(resp.StreamDescriptionSummary.EncryptionType))
	} else {
		ko.Status.EncryptionType = nil
	}
	if resp.StreamDescriptionSummary.EnhancedMonitoring != nil {
		f2 := []*svcapitypes.EnhancedMetrics{}
		for _, f2iter := range resp.StreamDescriptionSummary.EnhancedMonitoring {
			f2elem := &svcapitypes.EnhancedMetrics{}
			if f2iter.ShardLevelMetrics != nil {
				f2elemf0 := []*string{}
				for _, f2elemf0iter := range f2iter.ShardLevelMetrics {
					var f2elemf0elem *string
					f2elemf0elem = aws.String(string(f2elemf0iter))
					f2elemf0 = append(f2elemf0, f2elemf0elem)
				}
				f2elem.ShardLevelMetrics = f2elemf0
			}
			f2 = append(f2, f2elem)
		}
		ko.Status.EnhancedMonitoring = f2
	} else {
		ko.Status.EnhancedMonitoring = nil
	}
	if resp.StreamDescriptionSummary.KeyId != nil {
		ko.Status.KeyID = resp.StreamDescriptionSummary.KeyId
	} else {
		ko.Status.KeyID = nil
	}
	if resp.StreamDescriptionSummary.OpenShardCount != nil {
		openShardCountCopy := int64(*resp.StreamDescriptionSummary.OpenShardCount)
		ko.Status.OpenShardCount = &openShardCountCopy
	} else {
		ko.Status.OpenShardCount = nil
	}
	if resp.StreamDescriptionSummary.RetentionPeriodHours != nil {
		retentionPeriodHoursCopy := int64(*resp.StreamDescriptionSummary.RetentionPeriodHours)
		ko.Status.RetentionPeriodHours = &retentionPeriodHoursCopy
	} else {
		ko.Status.RetentionPeriodHours = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.StreamDescriptionSummary.StreamARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.StreamDescriptionSummary.StreamARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.StreamDescriptionSummary.StreamCreationTimestamp != nil {
		ko.Status.StreamCreationTimestamp = &metav1.Time{*resp.StreamDescriptionSummary.StreamCreationTimestamp}
	} else {
		ko.Status.StreamCreationTimestamp = nil
	}
	if resp.StreamDescriptionSummary.StreamModeDetails != nil {
		f8 := &svcapitypes.StreamModeDetails{}
		if resp.StreamDescriptionSummary.StreamModeDetails.StreamMode != "" {
			f8.StreamMode = aws.String(string(resp.StreamDescriptionSummary.StreamModeDetails.StreamMode))
		}
		ko.Spec.StreamModeDetails = f8
	} else {
		ko.Spec.StreamModeDetails = nil
	}
	if resp.StreamDescriptionSummary.StreamName != nil {
		ko.Spec.Name = resp.StreamDescriptionSummary.StreamName
	} else {
		ko.Spec.Name = nil
	}
	if resp.StreamDescriptionSummary.StreamStatus != "" {
		ko.Status.StreamStatus = aws.String(string(resp.StreamDescriptionSummary.StreamStatus))
	} else {
		ko.Status.StreamStatus = nil
	}

	rm.setStatusDefaults(ko)
	if !isStreamActive(r.ko.Status.StreamStatus) {
		return &resource{ko}, ackrequeue.Needed(fmt.Errorf("resource is not active"))
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return false
}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeStreamSummaryInput, error) {
	res := &svcsdk.DescribeStreamSummaryInput{}

	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.StreamARN = (*string)(r.ko.Status.ACKResourceMetadata.ARN)
	}
	if r.ko.Spec.Name != nil {
		res.StreamName = r.ko.Spec.Name
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateStreamOutput
	_ = resp
	resp, err = rm.sdkapi.CreateStream(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateStream", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateStreamInput, error) {
	res := &svcsdk.CreateStreamInput{}

	if r.ko.Spec.ShardCount != nil {
		shardCountCopy0 := *r.ko.Spec.ShardCount
		if shardCountCopy0 > math.MaxInt32 || shardCountCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field ShardCount is of type int32")
		}
		shardCountCopy := int32(shardCountCopy0)
		res.ShardCount = &shardCountCopy
	}
	if r.ko.Spec.StreamModeDetails != nil {
		f1 := &svcsdktypes.StreamModeDetails{}
		if r.ko.Spec.StreamModeDetails.StreamMode != nil {
			f1.StreamMode = svcsdktypes.StreamMode(*r.ko.Spec.StreamModeDetails.StreamMode)
		}
		res.StreamModeDetails = f1
	}
	if r.ko.Spec.Name != nil {
		res.StreamName = r.ko.Spec.Name
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateShardCountOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateShardCount(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateShardCount", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.StreamARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.StreamARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.StreamName != nil {
		ko.Spec.Name = resp.StreamName
	} else {
		ko.Spec.Name = nil
	}
	if resp.TargetShardCount != nil {
		targetShardCountCopy := int64(*resp.TargetShardCount)
		ko.Spec.ShardCount = &targetShardCountCopy
	} else {
		ko.Spec.ShardCount = nil
	}

	rm.setStatusDefaults(ko)
	if resp.TargetShardCount != nil {
		ko.Status.OpenShardCount = aws.Int64(int64(*resp.TargetShardCount))
	}

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateShardCountInput, error) {
	res := &svcsdk.UpdateShardCountInput{}

	res.ScalingType = "UNIFORM_SCALING"
	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.StreamARN = (*string)(r.ko.Status.ACKResourceMetadata.ARN)
	}
	if r.ko.Spec.Name != nil {
		res.StreamName = r.ko.Spec.Name
	}
	if r.ko.Spec.ShardCount != nil {
		targetShardCountCopy0 := *r.ko.Spec.ShardCount
		if targetShardCountCopy0 > math.MaxInt32 || targetShardCountCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field TargetShardCount is of type int32")
		}
		targetShardCountCopy := int32(targetShardCountCopy0)
		res.TargetShardCount = &targetShardCountCopy
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteStreamOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteStream(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteStream", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteStreamInput, error) {
	res := &svcsdk.DeleteStreamInput{}

	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.StreamARN = (*string)(r.ko.Status.ACKResourceMetadata.ARN)
	}
	if r.ko.Spec.Name != nil {
		res.StreamName = r.ko.Spec.Name
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Stream,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
