// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	"github.com/aws/aws-sdk-go/aws"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = ackv1alpha1.AWSAccountID("")
)

// An object that represents the details of the consumer you registered. This
// type of object is returned by RegisterStreamConsumer.
type Consumer struct {
	ConsumerCreationTimestamp *metav1.Time `json:"consumerCreationTimestamp,omitempty"`
}

// An object that represents the details of a registered consumer. This type
// of object is returned by DescribeStreamConsumer.
type ConsumerDescription struct {
	ConsumerCreationTimestamp *metav1.Time `json:"consumerCreationTimestamp,omitempty"`
	StreamARN                 *string      `json:"streamARN,omitempty"`
}

// Represents enhanced metrics types.
type EnhancedMetrics struct {
	ShardLevelMetrics []*string `json:"shardLevelMetrics,omitempty"`
}

// The unit of data of the Kinesis data stream, which is composed of a sequence
// number, a partition key, and a data blob.
type Record struct {
	ApproximateArrivalTimestamp *metav1.Time `json:"approximateArrivalTimestamp,omitempty"`
	EncryptionType              *string      `json:"encryptionType,omitempty"`
}

// The request parameter used to filter out the response of the ListShards API.
type ShardFilter struct {
	Timestamp *metav1.Time `json:"timestamp,omitempty"`
}

// The starting position in the data stream from which to start streaming.
type StartingPosition struct {
	Timestamp *metav1.Time `json:"timestamp,omitempty"`
}

// Represents the output for DescribeStream.
type StreamDescription struct {
	EncryptionType          *string            `json:"encryptionType,omitempty"`
	EnhancedMonitoring      []*EnhancedMetrics `json:"enhancedMonitoring,omitempty"`
	HasMoreShards           *bool              `json:"hasMoreShards,omitempty"`
	KeyID                   *string            `json:"keyID,omitempty"`
	RetentionPeriodHours    *int64             `json:"retentionPeriodHours,omitempty"`
	StreamARN               *string            `json:"streamARN,omitempty"`
	StreamCreationTimestamp *metav1.Time       `json:"streamCreationTimestamp,omitempty"`
	// Specifies the capacity mode to which you want to set your data stream. Currently,
	// in Kinesis Data Streams, you can choose between an on-demand capacity mode
	// and a provisioned capacity mode for your data streams.
	StreamModeDetails *StreamModeDetails `json:"streamModeDetails,omitempty"`
	StreamName        *string            `json:"streamName,omitempty"`
	StreamStatus      *string            `json:"streamStatus,omitempty"`
}

// Represents the output for DescribeStreamSummary
type StreamDescriptionSummary struct {
	ConsumerCount           *int64             `json:"consumerCount,omitempty"`
	EncryptionType          *string            `json:"encryptionType,omitempty"`
	EnhancedMonitoring      []*EnhancedMetrics `json:"enhancedMonitoring,omitempty"`
	KeyID                   *string            `json:"keyID,omitempty"`
	OpenShardCount          *int64             `json:"openShardCount,omitempty"`
	RetentionPeriodHours    *int64             `json:"retentionPeriodHours,omitempty"`
	StreamARN               *string            `json:"streamARN,omitempty"`
	StreamCreationTimestamp *metav1.Time       `json:"streamCreationTimestamp,omitempty"`
	// Specifies the capacity mode to which you want to set your data stream. Currently,
	// in Kinesis Data Streams, you can choose between an on-demand capacity mode
	// and a provisioned capacity mode for your data streams.
	StreamModeDetails *StreamModeDetails `json:"streamModeDetails,omitempty"`
	StreamName        *string            `json:"streamName,omitempty"`
	StreamStatus      *string            `json:"streamStatus,omitempty"`
}

// Specifies the capacity mode to which you want to set your data stream. Currently,
// in Kinesis Data Streams, you can choose between an on-demand capacity mode
// and a provisioned capacity mode for your data streams.
type StreamModeDetails struct {
	StreamMode *string `json:"streamMode,omitempty"`
}

// The summary of a stream.
type StreamSummary struct {
	StreamARN               *string      `json:"streamARN,omitempty"`
	StreamCreationTimestamp *metav1.Time `json:"streamCreationTimestamp,omitempty"`
	// Specifies the capacity mode to which you want to set your data stream. Currently,
	// in Kinesis Data Streams, you can choose between an on-demand capacity mode
	// and a provisioned capacity mode for your data streams.
	StreamModeDetails *StreamModeDetails `json:"streamModeDetails,omitempty"`
	StreamName        *string            `json:"streamName,omitempty"`
	StreamStatus      *string            `json:"streamStatus,omitempty"`
}

// Metadata assigned to the stream, consisting of a key-value pair.
type Tag struct {
	Value *string `json:"value,omitempty"`
}
